buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.6'
        classpath 'com.avast.gradle:docker-compose-gradle-plugin:0.3.27'
    }

}
description = 'Marketing Metrics Collector'

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'docker-compose'
    apply plugin: 'java'
    apply plugin: 'com.bmuschko.docker-remote-api'

    group = 'info.novatec'
    version = '1.0-SNAPSHOT'
}

subprojects {

    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenLocal()
        maven { url "http://repo.maven.apache.org/maven2" }
    }

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '1.5.2.RELEASE'
        compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '1.5.2.RELEASE'
        compile group: 'org.glassfish', name: 'javax.json', version: '1.0.4'
        compile group: 'javax.json', name: 'javax.json-api', version: '1.0'
        compile group: 'org.influxdb', name: 'influxdb-java', version: '2.5'
        testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.2.RELEASE') {
            exclude(module: 'commons-logging')
        }
        compile(group: 'org.projectlombok', name: 'lombok', version: '1.16.14') {
        }
    }

    sourceSets {
        test {
            java.srcDir 'src/test/unit/java'
        }
        integration {
            java.srcDir 'src/test/integration/java'
            resources.srcDir 'src/test/resources'
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    configurations {
        integrationCompile.extendsFrom testCompile
        integrationRuntime.extendsFrom testRuntime
    }

    task integration (type: Test, description: 'Runs the integration tests.', group: 'Verification') {
        testClassesDir = sourceSets.integration.output.classesDir
        classpath = sourceSets.integration.runtimeClasspath
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            html.enabled false
        }
    }

    check.dependsOn jacocoTestReport
}

task buildAll(dependsOn: build){
    println "config"

    doFirst{
        println "doFirst:"+project.name
    }
    doLast{
        println "doLast:"+project.name
    }
}

buildAll.mustRunAfter build
composeUp.mustRunAfter buildAll
composeUp.dependsOn buildAll